#!/usr/bin/python3

import sys
import os
import time
import subprocess
import difflib
import math


# CONSTANTS
BLU = '\033[94m'
GRN = '\033[92m'
RED = '\033[91m'
BLK = '\033[0m'
MONTHS = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May',
    'Jun', 'Jul', 'Aug',
    'Sep', 'Oct', 'Nov', 'Dec']


# SCORE PENALTIES
NO_MAIN = 10
NO_HEADER = 10
NO_DESCRIPT = 5
NO_COMMENTS = 10
WRONG_FNAME = 5
BAD_OUTPUT = 10
LATE_PER_DAY = 10
HAS_ERROR = 30


# Returns a standard 60-character divider to print out.
def div():
    return "------------------------------------------------------------"


# Calls the clear screen command.
def cls():
    subprocess.call(["clear"])


# Returns the similarity ratio between two strings.
def strSimilarity(one, two):
     return difflib.SequenceMatcher(None, one, two).ratio()


# Prints the list of issues with the program.
def showIssues(issues):
    print()
    print(RED)
    for i in range(len(issues)):
        print("[" + str(i+1) + "] " + issues[i])
    print(BLK, end="")


# Adds up the total grade values using the subtractions and additions lists
def computeGrade(subtractions, additions):
    result = 100
    for sub in subtractions:
        result -= sub
    for add in additions:
        result += add
    return max(0, result)
    
    
# Executes the program and displays its ouput in Blue.
def runProg(fPath, inputs = []):
    print(BLU)
    worked = True
    out = ""
    err = ""
    try:
        # open the subprocess and send any/all input to it
        proc = subprocess.Popen(["python3", fPath], \
                                stdin=subprocess.PIPE, \
                                stdout=subprocess.PIPE, \
                                stderr=subprocess.PIPE)
        for send in inputs:
            proc.stdin.write(bytes(send + "\n", "ascii"))
        proc.stdin.flush()
        out = str(proc.stdout.read()).replace("\\n", "\n")[2:-1]
        err = str(proc.stderr.read()).replace("\\n", "\n")[2:-1]
        print(out)
        print(RED + err)
        proc.terminate()
    except:
        worked = False
    print(BLK, end="")
    return worked, out, err


# Cats the file to display it on the screen.
def catProg(fPath):
    print(div())
    subprocess.call(["cat", fPath]) # cat the file
    print()
    print(div())


# Grades the student's submission by trying to match the file to their list
# of files in their directory path. This part also recognizes late submissions
# and incorrect file names.
def doGrade(student, pyFile, theirFiles, path, dueMonth, dueDay, inputs, outputs):
    cls()
    print("STUDENT:", student)

    # keep track of recommended grade and issues with the program
    issues = []
    comments = []
    subtractions = []

    # Try to find the correct file (even if it's mislabeled)
    theirFilesLwr = list(map(str.lower, theirFiles))
    trueFile = pyFile
    exists = True
    # if file is found, all good
    if pyFile in theirFiles:
        print("FILE:", pyFile)
    # file lowercase (bad)
    elif pyFile.lower() in theirFilesLwr:
        trueFile = pyFile.lower()
        print("FILE:", pyFile.lower(), RED + "(WRONG)" + BLK)
        issues.append("Wrong File Name [" + trueFile + "]: -" + str(WRONG_FNAME))
        comments.append("Wrong file name [-" + str(WRONG_FNAME) + "]")
        subtractions.append(WRONG_FNAME)
    # file missing extension (bad)
    elif pyFile[:-3] in theirFiles:
        trueFile = pyFile[:-3]
        print("FILE:", pyFile[:-3], RED + "(WRONG)" + BLK)
        issues.append("Wrong File Name [" + trueFile + "]: -" + str(WRONG_FNAME))
        comments.append("Wrong file name [-" + str(WRONG_FNAME) + "]")
        subtractions.append(WRONG_FNAME)
    # file missing extension and lowercase (bad)
    elif pyFile[:-3].lower() in theirFilesLwr:
        trueFile = pyFile[:-3].lower()
        print("FILE:", pyFile[:-3].lower(), RED + "(WRONG)" + BLK)
        issues.append("Wrong File Name [" + trueFile + "]: -" + str(WRONG_FNAME))
        comments.append("Wrong file name [-" + str(WRONG_FNAME) + "]")
        subtractions.append(WRONG_FNAME)
    # file not found at all, print an error and do a manual check
    else:
        print(RED + "File not found" + BLK + " for", student)
        print("Here are all of their files:", theirFiles)
        # ask grader if any of these should be tried... if not, its a 0
        trueFile = input("Should I load any of these? > ")
        if trueFile == "":
            issues.append("No File: 0")
            comments.append("No file.")
            subtractions.append(100)
            exists = False
        else:
            issues.append("Wrong File Name [" + trueFile + "]: -" + str(WRONG_FNAME))
            comments.append("Wrong file name [-" + str(WRONG_FNAME) + "]")
            subtractions.append(WRONG_FNAME)
    
    # if the file was in fact found, time it, run it, and cat it
    if exists:
        # figure out submission time
        fPath = path + "/" + student + "/" + trueFile
        mtime = os.path.getmtime(fPath)
        timestamp = time.ctime(mtime)
        timestamp = timestamp.split(' ')
        month = MONTHS.index(timestamp[1]) + 1
        if timestamp[2] != '':
            day = int(timestamp[2])
        else:
            day = int(timestamp[3])
        if month > dueMonth or (month == dueMonth and day > dueDay):
            approx = day - dueDay
            if month > dueMonth:
                approx += 30
            penalty = approx * LATE_PER_DAY
            subtractions.append(penalty)
            if penalty > 100:
                penalty = "0"
            else:
                penalty = "-" + str(penalty)
            # day or days? it matters!
            days = "days"
            if approx == 1:
                days = "day"
            issues.append("Late: " + str(month) + "/" + str(day) +\
                          " (due " + str(dueMonth) + "/" + str(dueDay) + ")" +\
                          " [approx " + str(approx) + " "+days+" late]: " +\
                          penalty)
            comments.append(str(approx) + " "+days+" late [" + penalty + "].")

        # grade flags for trying to run the program
        has_error = False
        output_grade = 0
        # if there is a module, run the program with the desired input/output values
        for i in range(len(inputs)):
            print(div())
            print("Testing with input value(s):")
            for j in range(len(inputs[i])):
                print("   " + inputs[i][j])
            matches = 0
            max_matches = len(outputs[i])
            # try to run the program
            worked, out, err = runProg(fPath, inputs[i])
            if not worked:
                print(RED + "Program failed to run." + BLK)
                has_error = True
                continue
            if "error" in err.lower():
                print(RED + "Program may have failed to run." + BLK)
                has_error = True
                continue
            # if it ran successfully, compare output with expected output(s)
            out = out.split("\n")[:-1]
            for j in range(min(len(outputs[i]), len(out))):
                ratio = strSimilarity(outputs[i][j], out[j])
                if out[j] != outputs[i][j]:
                    print(RED + "Mismatched line in output: " + BLK \
                              + str(round(ratio*100, 2)) + "% match")
                    print("Expected: '" + outputs[i][j] + "'")
                    print("     Got: '" + out[j] + "'")
                matches += ratio
            if len(out) != len(outputs[i]):
                print(RED + "Too many lines in output!" + BLK)
            elif matches == max_matches:
                print(GRN + "Output matched (correct)!" + BLK)
            output_grade += matches / max_matches
        output_grade /= len(inputs)
        output_grade = math.floor(output_grade*10) / 10 # round down
        print(div())
        print()
        print("Output grade:", output_grade)
        print()
        
        # if no module provided, just run the program normally once
        if len(inputs) == 0:
            worked = runProg(fPath)
            if not worked:
                print(RED + "Program failed to run." + BLK)
                has_error = True

        # report stats, halt, and then proceed to cat the program
        # TODO - report grade stats
        input("Finished. Press ENTER to continue.")
        cls()
        catProg(fPath)

        # read the file and check it for main(), header, and comments
        f = open(fPath, "r")
        hasMain = False
        hasHeader = False
        atHeader = True
        hasDescription = False
        hasComments = False
        for line in f:
            line = line.strip()
            # check for main()
            if not atHeader and not hasMain and "main" in line:
                hasMain = True
            # check for header
            if atHeader:
                if len(line) > 0 and line[0] != "#":
                    atHeader = False
                if len(line) > 0 and line[0] == "#":
                    hasHeader = True
            # check for comments
            if not atHeader and "#" in line:
                hasComments = True
            # check for program description:
            if atHeader and "description" in line.lower():
                descIndx = line.lower().find("description")
                rest = line[descIndx + 12:].strip()
                if len(rest) > 12:
                    hasDescription = True
        f.close()

        # go through each flag and take off points for it
        if has_error:
            issues.append("Program did not run: -" + str(HAS_ERROR))
            comments.append("Program did not run [-" + str(HAS_ERROR) + "].")
            subtractions.append(HAS_ERROR)
        if output_grade < 1:
            output_sub = round(BAD_OUTPUT * (1 - output_grade))
            issues.append("Mismatched output: -" + str(output_sub))
            comments.append("Mismatched output [-" + str(output_sub) + "]")
            subtractions.append(output_sub)
        if not hasMain:
            issues.append("Missing main(): -" + str(NO_MAIN))
            comments.append("Missing main() [-" + str(NO_MAIN) + "].")
            subtractions.append(NO_MAIN)
        if not hasHeader:
            issues.append("Missing header: -" + str(NO_HEADER))
            comments.append("Missing header [-" + str(NO_HEADER) + "].")
            subtractions.append(NO_HEADER)
        if not hasComments:
            issues.append("No comments: -" + str(NO_COMMENTS))
            comments.append("No comments [-" + str(NO_COMMENTS) + "].")
            subtractions.append(NO_COMMENTS)
        if hasHeader and not hasDescription:
            issues.append("Missing or incomplete description: -" + str(NO_DESCRIPT))
            comments.append("Missing description [-" + str(NO_DESCRIPT) + "].")
            subtractions.append(NO_DESCRIPT)

    # Display all issues and the maximum recommended grade, and then let the
    # grader remove issues, and add or subtract points manually, or override
    # the grade as follows:
    #   Let N be a number.
    #       xN      removes issue N
    #       -N      subtracts N points
    #       +N      adds N points
    #       N       overrides the grade to N points
    #               (no input) keeps recommended grade
    showIssues(issues)
    recommended = computeGrade(subtractions, [])
    print(GRN + "Max grade: " + str(recommended))
    grade = input(BLU + "Grade:     " + BLK)
    additions = []
    while grade != "":
        modifications = grade.split()
        if(len(modifications) == 1 and modifications[0][0] != "+" \
                                   and modifications[0][0] != "-" \
                                   and modifications[0][0] != "x" \
                                   and modifications[0].isdigit()):
            recommended = int(modifications[0])
            break
        for mod in modifications:
            if mod[0] == "x":
                issueIndx = int(mod[1:]) - 1
                issues.pop(issueIndx)
                comments.pop(issueIndx)
                subtractions.pop(issueIndx)
            elif mod[0] == "+":
                cVal = int(mod[1:])
                additions.append(cVal)
            elif mod[0] == "-":
                cVal = int(mod[1:])
                additions.append(-cVal)
        showIssues(issues)
        recommended = computeGrade(subtractions, additions)
        print(GRN + "New grade: " + str(recommended))
        grade = input(BLU + "Grade:     " + BLK)
    grade = str(max(0, recommended))

    # process standard comments, and get grader append any other notes
    cmnts = ""
    for c in comments:
        cmnts += c + " "
    cmnts += input(BLU + "Comments:  " + BLK)

    # set up the user's grade and confirm (or redo) it if grader wants
    usrGrade = []
    usrGrade.append(student)
    usrGrade.append(grade)
    usrGrade.append(cmnts)
    print(usrGrade)
    ans = input("Done. Type 'r' to redo this grade, or 'q' to quit. ")
    quit = False
    if ans.lower() == "r":
        doGrade(student, pyFile, theirFiles, path, dueMonth, dueDay, inputs, outputs)
    elif ans.lower() == "q":
        quit = True

    # return the grade for file processing
    print(div() + "\n" + div() + "\n" + div())
    return usrGrade, quit


# Go through each person's submission and grade it, then write the grades to
# a file.
def main(assignment, pyFile, dueMonth, dueDay, module, start):
    # set up date, file path, and first person to start grading
    dueMonth = int(dueMonth)
    dueDay = int(dueDay)
    fpath = assignment
    first = True
    go = True
    if start != "":
        go = False

    # if a grading module was provided, set it up here:
    inputs = []
    outputs = []
    test_runs = 0
    if module != "":
        mod_fH = open(module, "r")
        lines = mod_fH.readlines()
        mod_fH.close()
        test_runs = int(lines[0][4:])
        i = 2
        for run in range(test_runs):
            inputs.append([])
            outputs.append([])
            while i < len(lines) and not lines[i].startswith("OUTPUT"):
                inputs[run].append(lines[i].strip()[4:])
                i += 1
            i += 1
            while i < len(lines) and not lines[i].startswith("INPUT"):
                outputs[run].append(lines[i].strip()[4:])
                i += 1
            i += 1

    # if the file is empty, we need to write the header
    outFile = assignment + "_grades.csv"
    if not os.path.isfile(outFile) or os.stat(outFile).st_size == 0:
        fH = open(outFile, "w")
        fH.write("\"Last Name\",\"First Name\",\"" +\
            assignment + "\",\"Feedback to User\"\n")
        fH.close()

    # get a sorted list of students and iterate through them
    students = os.listdir(fpath)
    students.sort()
    for student in students:
        # skip students that are before the starting point
        if not go:
            if student.startswith(start):
                go = True
            else:
                continue
        # get the student's submissions and grade the file
        files = os.listdir(fpath + "/" + student)
        usrGrade, quit = doGrade(student, pyFile, files, fpath, \
                                 dueMonth, dueDay, inputs, outputs)

        # write the data to the output file
        studentNames = usrGrade[0].split(",")
        if len(studentNames) == 2:
            lastName, firstName = usrGrade[0].split(",")
        else:
            lastName = firstName = usrGrade[0]
        fH = open(outFile, "a")
        fH.write("\"" + lastName + "\",\"" + firstName + "\",\"" + usrGrade[1]\
            + "\",\"" + usrGrade[2].replace("\"", "\"\"") + "\"\n")
        #fH.write(usrGrade[0].ljust(25))
        #fH.write(usrGrade[1].ljust(4))
        #fH.write(usrGrade[2] + "\n")
        fH.close()
        if quit:
            break


# Check parameters and call main() with the appropriate values.
if __name__ == '__main__':
    if len(sys.argv) < 5:
        print("USAGE: ./grader <assignment> <.py file> <due month> <due day> [--options--]")
        print("Options:")
        print("  -m module  provide a grading module for input/output option checking")
        print("  -s start   provide the first few letters of a last name to start at")
    else:
        # check for options
        module = ""
        start = ""
        remaining_args = sys.argv[5:]
        for i in range(len(remaining_args)):
            if remaining_args[i] == "-m" and len(remaining_args) > i+1:
                module = remaining_args[i+1]
            elif remaining_args[i] == "-s" and len(remaining_args) > i+1:
                start = remaining_args[i+1]
        main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], module, start)
